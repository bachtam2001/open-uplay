/*
   This file has been generated by IDA.
   It contains local type definitions from
   the type library 'uplay_r1'
*/

#define __int8 char
#define __int16 short
#define __int32 int
#define __int64 long long

struct _SYSTEMTIME;
struct _EXCEPTION_RECORD;
struct _CONTEXT;
union _LARGE_INTEGER;
struct _iobuf;
struct threadlocaleinfostruct;
struct _RTL_CRITICAL_SECTION_DEBUG;

/* 1 */
struct _GUID
{
  unsigned __int32 Data1;
  unsigned __int16 Data2;
  unsigned __int16 Data3;
  unsigned __int8 Data4[8];
};

/* 2 */
typedef struct _GUID GUID;

/* 3 */
typedef struct _SCOPETABLE_ENTRY *PSCOPETABLE_ENTRY;

/* 31 */
typedef void *PVOID;

/* 11 */
typedef unsigned __int32 DWORD;

/* 4 */
struct _EH3_EXCEPTION_REGISTRATION
{
  struct _EH3_EXCEPTION_REGISTRATION *Next;
  PVOID ExceptionHandler;
  PSCOPETABLE_ENTRY ScopeTable;
  DWORD TryLevel;
};

/* 5 */
typedef struct _EH3_EXCEPTION_REGISTRATION EH3_EXCEPTION_REGISTRATION;

/* 6 */
typedef struct _EH3_EXCEPTION_REGISTRATION *PEH3_EXCEPTION_REGISTRATION;

/* 7 */
struct CPPEH_RECORD
{
  DWORD old_esp;
  EXCEPTION_POINTERS *exc_ptr;
  struct _EH3_EXCEPTION_REGISTRATION registration;
};

/* 8 */
struct _EH4_SCOPETABLE_RECORD
{
  int EnclosingLevel;
  void *FilterFunc;
  void *HandlerFunc;
};

/* 9 */
struct _EH4_SCOPETABLE
{
  DWORD GSCookieOffset;
  DWORD GSCookieXOROffset;
  DWORD EHCookieOffset;
  DWORD EHCookieXOROffset;
  struct _EH4_SCOPETABLE_RECORD ScopeRecord[];
};

/* 14 */
typedef unsigned __int16 wchar_t;

/* 13 */
typedef wchar_t WCHAR;

/* 12 */
typedef WCHAR *LPWSTR;

/* 15 */
typedef unsigned __int16 WORD;

/* 17 */
typedef unsigned __int8 BYTE;

/* 16 */
typedef BYTE *LPBYTE;

/* 18 */
typedef void *HANDLE;

/* 10 */
struct _STARTUPINFOW
{
  DWORD cb;
  LPWSTR lpReserved;
  LPWSTR lpDesktop;
  LPWSTR lpTitle;
  DWORD dwX;
  DWORD dwY;
  DWORD dwXSize;
  DWORD dwYSize;
  DWORD dwXCountChars;
  DWORD dwYCountChars;
  DWORD dwFillAttribute;
  DWORD dwFlags;
  WORD wShowWindow;
  WORD cbReserved2;
  LPBYTE lpReserved2;
  HANDLE hStdInput;
  HANDLE hStdOutput;
  HANDLE hStdError;
};

/* 19 */
struct _PROCESS_INFORMATION
{
  HANDLE hProcess;
  HANDLE hThread;
  DWORD dwProcessId;
  DWORD dwThreadId;
};

/* 21 */
typedef char CHAR;

/* 20 */
struct _OSVERSIONINFOA
{
  DWORD dwOSVersionInfoSize;
  DWORD dwMajorVersion;
  DWORD dwMinorVersion;
  DWORD dwBuildNumber;
  DWORD dwPlatformId;
  CHAR szCSDVersion[128];
};

/* 22 */
struct _FILETIME
{
  DWORD dwLowDateTime;
  DWORD dwHighDateTime;
};

/* 23 */
typedef _FILETIME FILETIME;

/* 24 */
struct _WIN32_FIND_DATAW
{
  DWORD dwFileAttributes;
  FILETIME ftCreationTime;
  FILETIME ftLastAccessTime;
  FILETIME ftLastWriteTime;
  DWORD nFileSizeHigh;
  DWORD nFileSizeLow;
  DWORD dwReserved0;
  DWORD dwReserved1;
  WCHAR cFileName[260];
  WCHAR cAlternateFileName[14];
};

/* 25 */
typedef _SYSTEMTIME SYSTEMTIME;

/* 26 */
struct _SYSTEMTIME
{
  WORD wYear;
  WORD wMonth;
  WORD wDayOfWeek;
  WORD wDay;
  WORD wHour;
  WORD wMinute;
  WORD wSecond;
  WORD wMilliseconds;
};

/* 29 */
typedef _EXCEPTION_RECORD EXCEPTION_RECORD;

/* 28 */
typedef EXCEPTION_RECORD *PEXCEPTION_RECORD;

/* 34 */
typedef _CONTEXT CONTEXT;

/* 33 */
typedef CONTEXT *PCONTEXT;

/* 27 */
struct _EXCEPTION_POINTERS
{
  PEXCEPTION_RECORD ExceptionRecord;
  PCONTEXT ContextRecord;
};

/* 32 */
typedef unsigned __int32 UINT_PTR;

/* 30 */
struct _EXCEPTION_RECORD
{
  DWORD ExceptionCode;
  DWORD ExceptionFlags;
  _EXCEPTION_RECORD *ExceptionRecord;
  PVOID ExceptionAddress;
  DWORD NumberParameters;
  UINT_PTR ExceptionInformation[15];
};

/* 37 */
struct _FLOATING_SAVE_AREA
{
  DWORD ControlWord;
  DWORD StatusWord;
  DWORD TagWord;
  DWORD ErrorOffset;
  DWORD ErrorSelector;
  DWORD DataOffset;
  DWORD DataSelector;
  BYTE RegisterArea[80];
  DWORD Cr0NpxState;
};

/* 36 */
typedef _FLOATING_SAVE_AREA FLOATING_SAVE_AREA;

/* 35 */
struct _CONTEXT
{
  DWORD ContextFlags;
  DWORD Dr0;
  DWORD Dr1;
  DWORD Dr2;
  DWORD Dr3;
  DWORD Dr6;
  DWORD Dr7;
  FLOATING_SAVE_AREA FloatSave;
  DWORD SegGs;
  DWORD SegFs;
  DWORD SegEs;
  DWORD SegDs;
  DWORD Edi;
  DWORD Esi;
  DWORD Ebx;
  DWORD Edx;
  DWORD Ecx;
  DWORD Eax;
  DWORD Ebp;
  DWORD Eip;
  DWORD SegCs;
  DWORD EFlags;
  DWORD Esp;
  DWORD SegSs;
  BYTE ExtendedRegisters[512];
};

/* 38 */
typedef _LARGE_INTEGER LARGE_INTEGER;

/* 41 */
typedef __int32 LONG;

/* 40 */
struct _LARGE_INTEGER::$837407842DC9087486FDFA5FEB63B74E
{
  DWORD LowPart;
  LONG HighPart;
};

/* 42 */
typedef __int64 LONGLONG;

/* 39 */
union _LARGE_INTEGER
{
  struct
  {
    DWORD LowPart;
    LONG HighPart;
  };
  _LARGE_INTEGER::$837407842DC9087486FDFA5FEB63B74E u;
  LONGLONG QuadPart;
};

/* 43 */
struct _TIME_ZONE_INFORMATION
{
  LONG Bias;
  WCHAR StandardName[32];
  SYSTEMTIME StandardDate;
  LONG StandardBias;
  WCHAR DaylightName[32];
  SYSTEMTIME DaylightDate;
  LONG DaylightBias;
};

/* 45 */
typedef unsigned int UINT;

/* 44 */
struct _cpinfo
{
  UINT MaxCharSize;
  BYTE DefaultChar[2];
  BYTE LeadByte[12];
};

/* 47 */
typedef void *LPVOID;

/* 48 */
typedef int BOOL;

/* 46 */
struct _SECURITY_ATTRIBUTES
{
  DWORD nLength;
  LPVOID lpSecurityDescriptor;
  BOOL bInheritHandle;
};

/* 49 */
struct _Ctypevec
{
  unsigned __int32 _Hand;
  unsigned int _Page;
  const __int16 *_Table;
  int _Delfl;
};

/* 50 */
#pragma pack(push, 8)
struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;
};
#pragma pack(pop)

/* 51 */
typedef _iobuf FILE;

/* 52 */
#pragma pack(push, 8)
struct _iobuf
{
  char *_ptr;
  int _cnt;
  char *_base;
  int _flag;
  int _file;
  int _charbuf;
  int _bufsiz;
  char *_tmpfname;
};
#pragma pack(pop)

/* 53 */
struct _BY_HANDLE_FILE_INFORMATION
{
  DWORD dwFileAttributes;
  FILETIME ftCreationTime;
  FILETIME ftLastAccessTime;
  FILETIME ftLastWriteTime;
  DWORD dwVolumeSerialNumber;
  DWORD nFileSizeHigh;
  DWORD nFileSizeLow;
  DWORD nNumberOfLinks;
  DWORD nFileIndexHigh;
  DWORD nFileIndexLow;
};

/* 55 */
typedef threadlocaleinfostruct *pthreadlocinfo;

/* 62 */
struct threadmbcinfostruct;

/* 61 */
typedef struct threadmbcinfostruct *pthreadmbcinfo;

/* 54 */
struct localeinfo_struct
{
  pthreadlocinfo locinfo;
  pthreadmbcinfo mbcinfo;
};

/* 58 */
struct tagLC_ID
{
  unsigned __int16 wLanguage;
  unsigned __int16 wCountry;
  unsigned __int16 wCodePage;
};

/* 57 */
typedef tagLC_ID LC_ID;

/* 59 */
struct threadlocaleinfostruct::$F0551D0CB09E7A078CAEF7CAC43D74C7
{
  char *locale;
  wchar_t *wlocale;
  int *refcount;
  int *wrefcount;
};

/* 60 */
struct __lc_time_data;

/* 56 */
struct threadlocaleinfostruct
{
  int refcount;
  unsigned int lc_codepage;
  unsigned int lc_collate_cp;
  unsigned __int32 lc_handle[6];
  LC_ID lc_id[6];
  threadlocaleinfostruct::$F0551D0CB09E7A078CAEF7CAC43D74C7 lc_category[6];
  int lc_clike;
  int mb_cur_max;
  int *lconv_intl_refcount;
  int *lconv_num_refcount;
  int *lconv_mon_refcount;
  struct threadlocaleinfostruct::lconv *lconv;
  int *ctype1_refcount;
  unsigned __int16 *ctype1;
  const unsigned __int16 *pctype;
  const unsigned __int8 *pclmap;
  const unsigned __int8 *pcumap;
  __lc_time_data *lc_time_curr;
};

/* 63 */
struct Concurrency::details::SchedulerBase;

/* 64 */
struct std::_Ref_count_base;

/* 65 */
struct Concurrency::details::_ReaderWriterLock;

/* 66 */
struct std::_Iterator_base12;

/* 67 */
struct std::_Iterator_base_secure;

/* 68 */
struct std::ios_base;

/* 70 */
typedef _RTL_CRITICAL_SECTION_DEBUG *PRTL_CRITICAL_SECTION_DEBUG;

/* 69 */
struct _RTL_CRITICAL_SECTION
{
  PRTL_CRITICAL_SECTION_DEBUG DebugInfo;
  LONG LockCount;
  LONG RecursionCount;
  HANDLE OwningThread;
  HANDLE LockSemaphore;
  DWORD SpinCount;
};

/* 73 */
struct _LIST_ENTRY
{
  _LIST_ENTRY *Flink;
  _LIST_ENTRY *Blink;
};

/* 72 */
typedef _LIST_ENTRY LIST_ENTRY;

/* 71 */
struct _RTL_CRITICAL_SECTION_DEBUG
{
  WORD Type;
  WORD CreatorBackTraceIndex;
  struct _RTL_CRITICAL_SECTION_DEBUG::_RTL_CRITICAL_SECTION *CriticalSection;
  LIST_ENTRY ProcessLocksList;
  DWORD EntryCount;
  DWORD ContentionCount;
  DWORD Spare[2];
};

/* 74 */
struct std::locale::_Locimp;

/* 75 */
struct std::error_category;

/* 76 */
struct std::_System_error_category;

/* 77 */
struct _Init_atexit;

/* 78 */
struct std::exception;

/* 79 */
struct exception;

/* 80 */
struct type_info;

/* 81 */
struct std::bad_alloc;

/* 82 */
struct _LocaleUpdate;

/* 83 */
struct _HeapManager;

/* 84 */
struct DName;

/* 85 */
struct Replicator;

/* 86 */
struct charNode;

/* 87 */
struct pDNameNode;

/* 88 */
struct DNameStatusNode;

/* 89 */
struct pairNode;

/* 90 */
struct UnDecorator;

/* 91 */
struct pcharNode;

/* 92 */
struct Concurrency::details::_NonReentrantLock;

/* 93 */
struct Concurrency::details::InternalContextBase;

/* 94 */
struct std::bad_function_call;

/* 95 */
struct std::_Init_locks;

/* 96 */
struct std::_Lockit;

/* 97 */
struct std::_Mutex;

/* 98 */
struct std::locale::facet;

/* 99 */
struct std::_Fac_node;

/* 100 */
struct _Timevec;

/* 101 */
union __declspec(align(8)) __m64
{
  unsigned __int64 m64_u64;
  float m64_f32[2];
  __int8 m64_i8[8];
  __int16 m64_i16[4];
  __int32 m64_i32[2];
  __int64 m64_i64;
  unsigned __int8 m64_u8[8];
  unsigned __int16 m64_u16[4];
  unsigned __int32 m64_u32[2];
};

/* 102 */
union __declspec(align(16)) __m128
{
  float m128_f32[4];
  unsigned __int64 m128_u64[2];
  __int8 m128_i8[16];
  __int16 m128_i16[8];
  __int32 m128_i32[4];
  __int64 m128_i64[2];
  unsigned __int8 m128_u8[16];
  unsigned __int16 m128_u16[8];
  unsigned __int32 m128_u32[4];
};

/* 103 */
struct __m128d
{
  double m128d_f64[2];
};

/* 104 */
union __declspec(align(16)) __m128i
{
  __int8 m128i_i8[16];
  __int16 m128i_i16[8];
  __int32 m128i_i32[4];
  __int64 m128i_i64[2];
  unsigned __int8 m128i_u8[16];
  unsigned __int16 m128i_u16[8];
  unsigned __int32 m128i_u32[4];
  unsigned __int64 m128i_u64[2];
};

